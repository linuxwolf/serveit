version: "3"

includes:
  deno:
    taskfile: ./.builder/deno/taskfile.yaml
  docker:
    taskfile: ./.builder/docker/taskfile.yaml

tasks:
  clean:
    desc: Cleans all intermediates, excluding caches
    deps:
      - deno:clean

  clean.cache:
    - git -dfx .cache
  
  dist-clean:
    desc: Cleans everything, including local caches
    deps:
      - clean
      - docker:clean

  test:
    desc: Builds and runs tests
    cmds:
      - task: deno:test

  cover:
    desc: Builds and runs tests, and reports coverage
    cmds:
      - task: test
      - task: deno:coverage

  checks:
    desc: Performs checks on Rust sources (lint, format checks)
    deps:
      - deno:checks

  compile.linux-arm64:
    - task: deno:compile
      vars:
        TARGET_TRIPLE: aarch64-unknown-linux-gnu
        TARGET_PLATFORM: linux-arm64
        BINARY: serveit
        ENTRYPOINT: src/main.ts
        PERMISSIONS: "--allow-net --allow-read"

  compile.linux-amd64:
    - task: deno:compile
      vars:
        TARGET_TRIPLE: x86_64-unknown-linux-gnu
        TARGET_PLATFORM: linux-amd64
        BINARY: serveit
        ENTRYPOINT: src/main.ts
        PERMISSIONS: "--allow-net --allow-read"

  compile:
    desc: Compiles the release binaries for all supported platforms
    deps:
      - compile.linux-amd64
      - compile.linux-arm64

  image.only:
    cmds:
      - task: docker:image
        vars:
          IMAGE_REPOSITORY: o-p-n/serveit
          IMAGE_TAG: '{{ default "latest" .IMAGE_TAG }}'
    
  image:
    desc: Creates a multi-arch container image
    cmds:
      - task: compile
      - task: image.only
