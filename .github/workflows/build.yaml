name: build
env:
  RUST_VERSION: "1.70.0"
on:
  pull_request:
    branches:
      - main

jobs:
  test:
    name: Test code
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true
      - name: Setup Task
        uses: arduino/setup-task@v1
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup Rust Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: cargo-lint-${{ hashFiles('**/Cargo.lock') }}
      - name: Setup Rust
        run: |
          rustup install ${{ env.RUST_VERSION }}
          rustup component add clippy
      - name: Run tests
        run: |
          task cover
      - name: Report coverage
        uses: codecov/codecov-action@v3
        with:
          files: coverage/lcov
  lint:
    name: Lint code
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true
      - name: Setup Task
        uses: arduino/setup-task@v1
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup Rust Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: cargo-lint-${{ hashFiles('**/Cargo.lock') }}
      - name: Setup Task
        uses: arduino/setup-task@v1
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup Rust
        run: |
          rustup install ${{ env.RUST_VERSION }}
          rustup component add clippy
      - name: Check lint
        run: |
          task check.lint
  fmt-check:
    name: Check formatting
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true
      - name: Setup Task
        uses: arduino/setup-task@v1
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup Rust
        run: |
          rustup install ${{ env.RUST_VERSION }}
          rustup component add rustfmt
      - name: Check formatting
        run: |
          task check.fmt
  compile:
    strategy:
      matrix:
        include:
          - output: linux-amd64
            target: x86_64-unknown-linux-musl
          - output: linux-arm64
            target: aarch64-unknown-linux-musl
    name: Compile ${{ matrix.output }} binary
    needs:
      - test
      - lint
      - fmt-check
    runs-on: ubuntu-22.04
    env:
      CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER: "./llvm/bin/lld"
      CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_LINKER: "./llvm/bin/lld"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true
      - name: Setup Task
        uses: arduino/setup-task@v1
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup LLVM Caching
        id: cache-llvm
        uses: actions/cache@v3
        with:
          path: |
            ./llvm
          key: llvm-${{ runner.os }}
      - name: Setup LLVM
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: "15"
          cached: ${{ steps.cache-llvm.outputs.cache-hit }}
      - name: Setup Rust Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: cargo-${{ matrix.output }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: cargo-${{ matrix.output }} 
      - name: Setup Rust
        run: |
          rustup install ${{ env.RUST_VERSION }}
      - name: Compile
        env:
          CARGO_TARGET_${{ matrix.config }}_LINKER: "./llvm/bin/lld"
        run: |
          task compile.${{ matrix.output }}
      - name: Upload Targets
        uses: actions/upload-artifact@v3
        with:
          name: serveit-${{ matrix.output }}
          path: target/${{ matrix.output }}
  build-image:
    name: Build image
    needs:
      - compile
    runs-on: ubuntu-22.04
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true
      - name: Setup Task
        uses: arduino/setup-task@v1
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: network=host
      - name: Setup Container Caching
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: buildx-${{ runner.os }}-${{ github.sha }}
          restore-keys:  buildx-${{ runner.os }}
      - name: Download linux/amd64 binary
        uses: actions/download-artifact@v3
        with:
          name: serveit-linux-amd64
          path: target
      - name: Download linux/arm64 binary
        uses: actions/download-artifact@v3
        with:
          name: serveit-linux-arm64
          path: target
      - name: Build image
        run: task image.only DOCKER_CACHE=/tmp/.buildx-cache
